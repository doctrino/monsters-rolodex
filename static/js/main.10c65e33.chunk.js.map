{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","monster","className","alt","src","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","updateSearchField","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yUAGaA,EAAO,SAAAC,GAChB,IAAMC,EAAUD,EAAMC,QACtB,OACI,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAQI,GAAlC,eACtB,mCAAMJ,EAAQK,QACd,kCAAKL,EAAQM,aCLZC,EAAW,SAAAR,GACpB,OAAQ,qBAAKE,UAAU,YAAf,SACJF,EAAMS,SAASC,KAAI,SAAAT,GAAO,OACtB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQI,UCHlBM,G,MAAY,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,aACpC,OAAQ,uBAAOX,UAAU,SAASY,KAAK,SAASF,YAAaA,EAC9CG,SAAUF,MCgCdG,E,kDAhCX,WAAYhB,GAAQ,IAAD,8BACf,cAAMA,IAaViB,kBAAoB,SAACC,GACjB,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAbrC,EAAKC,MAAQ,CACTd,SAAU,GACVW,YAAa,IAJF,E,qDAQnB,WAAqB,IAAD,OAChBI,MAAM,6CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACV,SAAUmB,S,oBAOhD,WAAU,IAAD,EAC2BC,KAAKN,MAA9Bd,EADF,EACEA,SAAUW,EADZ,EACYA,YACXU,EAAmBrB,EAASsB,QAAO,SAAA9B,GAAO,OAAIA,EAAQK,KAAK0B,cAAcC,SAASb,EAAYY,kBACpG,OACI,sBAAK9B,UAAU,MAAf,UACI,kDACA,cAAC,EAAD,CAAWU,YAAY,kBACZC,aAAcgB,KAAKZ,oBAC9B,cAAC,EAAD,CAAUR,SAAUqB,W,GA3BlBI,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.10c65e33.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.style.css';\r\n\r\nexport const Card = props => {\r\n    const monster = props.monster;\r\n    return (\r\n        <div className=\"card-container\">\r\n            <img alt=\"monster\" src={`https://robohash.org/${monster.id}?set=set2`}/>\r\n            <h2> {monster.name}</h2>\r\n            <p> {monster.email}</p>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport './card-list.style.css'\r\nimport {Card} from \"../card/card.component\";\r\n\r\nexport const CardList = props => {\r\n    return (<div className=\"card-list\">{\r\n        props.monsters.map(monster => (\r\n            <Card key={monster.id} monster={monster} />\r\n        ))\r\n    }</div>);\r\n};\r\n","import React from 'react';\r\nimport './search-box.style.css'\r\n\r\n\r\nexport const SearchBox = ({placeholder, handleChange}) => {\r\n    return (<input className=\"search\" type=\"search\" placeholder={placeholder}\r\n                   onChange={handleChange}/>);\r\n}\r\n","import React, {Component} from 'react';\nimport './App.css';\nimport {CardList} from \"./components/card-list/card-list.component\";\nimport {SearchBox} from \"./components/search-box/search-box.component\";\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            monsters: [],\n            searchField: \"\"\n        }\n    }\n\n    componentDidMount() {\n        fetch(\"http://jsonplaceholder.typicode.com/users\")\n            .then(response => response.json())\n            .then(users => this.setState({monsters: users}))\n    }\n\n    updateSearchField = (e) => {\n        this.setState({searchField: e.target.value})\n    }\n\n    render() {\n        const {monsters, searchField} = this.state;\n        const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()))\n        return (\n            <div className=\"App\">\n                <h1>Monsters Rolodex</h1>\n                <SearchBox placeholder=\"search monsters\"\n                           handleChange={this.updateSearchField}/>\n                <CardList monsters={filteredMonsters}/>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}